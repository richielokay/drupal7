<?php

/**
 * @file
 * Tests for the Skinr UI module.
 */

/**
 * Base class for Skinr UI tests.
 */
class SkinrUITestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  function setUp() {
    parent::setUp(array('block', 'contextual', 'skinr_test', 'skinr_ui'));

    $this->admin_user = $this->drupalCreateUser(array(
      'administer blocks',
      'access contextual links',
      'administer skinr',
      'edit skin settings',
      'edit advanced skin settings',
    ));
    $this->drupalLogin($this->admin_user);

    // Enable main system block for content region and the user menu block for
    // the first sidebar.
    // @see http://drupal.org/node/913086
    $default_theme = variable_get('theme_default', 'bartik');
    db_merge('block')
      ->key(array(
        'theme' => $default_theme,
        'module' => 'system',
        'delta' => 'main',
      ))
      ->fields(array(
        'status' => 1,
        'region' => 'content',
        'pages' => '',
      ))
      ->execute();
    db_merge('block')
      ->key(array(
        'theme' => $default_theme,
        'module' => 'system',
        'delta' => 'user-menu',
      ))
      ->fields(array(
        'status' => 1,
        'region' => 'sidebar_first',
        'pages' => '',
      ))
      ->execute();

    // Enable Garland and skinr_test_subtheme without enabling its base theme in
    // order to test subtheme inheritance functionality.
    theme_enable(array('garland', 'skinr_test_subtheme'));
  }

  /**
   * Asserts that a class is set for the given element id.
   *
   * @param $id
   *   Id of the HTML element to check.
   * @param $class
   *   The class name to check for.
   * @param $message
   *   Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  function assertSkinrClass($id, $class, $message = '') {
    $elements = $this->xpath('//div[@id=:id]', array(':id' => $id));
    $class_attr = (string) $elements[0]['class'];
    $this->assertTrue(strpos($class_attr, ' ' . $class . ' '), $message);
  }

  /**
   * Asserts that a class is not set for the given element id.
   *
   * @param $id
   *   Id of the HTML element to check.
   * @param $class
   *   The class name to check for.
   * @param $message
   *   Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  function assertNoSkinrClass($id, $class, $message = '') {
    $elements = $this->xpath('//div[@id=:id]', array(':id' => $id));
    $class_attr = (string) $elements[0]['class'];
    $this->assertFalse(strpos($class_attr, ' ' . $class . ' '), $message);
  }
}

/**
 * Tests UI functionality.
 */
class SkinrUIBasicTestCase extends SkinrUITestCase {
  public static function getInfo() {
    return array(
      'name' => 'UI',
      'description' => 'Tests basic Skinr UI functionality.',
      'group' => 'Skinr',
    );
  }

  /**
   * Tests basic configuration and applying of a skin.
   *
   * @todo For some reason, contextual links are not visible in the debug output
   *   when running tests; likely a core bug in contextual.js. However, the
   *   links are contained in the output. Keep this in mind when manually
   *   reviewing the debug output after running tests!
   * @todo Remove the overly verbose inline comments after the Skinr development
   *   team has figured out how to write tests.
   */
  function testSkinEdit() {
    // Go to the front page, on which the user menu block should appear.
    $this->drupalGet('');
    // Click the first (index 0) 'Edit skin' link on the page, which should be
    // the link in the contextual links of the user menu block, since no other
    // skinnable elements are visible on the page.
    // For now, this is a simple way to assert and access Skinr links. In the
    // future, we want to be more explicit in testing; i.e., verify that there
    // is really only this link, its 'href' is correct, that it appears in the
    // right location, etc.pp; DrupalWebTestCase ($this) provides many helper
    // functions to assert such things.
    $this->clickLink(t('Edit skin'), 0);
    // Verify that we end up on the expected URL to configure skins for the
    // user menu block.
    $front = variable_get('site_frontpage', 'node');
    $this->assertUrl('admin/appearance/skinr/edit/nojs/block/system__user-menu/configure', array(
      'query' => array('destination' => $front),
    ));

    // skinr_test.module got enabled in setUp(), so its skins should be
    // available.
    // Verify that we can apply the skinr_test_font skin to the block.
    $edit = array(
      'skinr_settings[block_group][bartik][typography][skinr_test_font]' => 'font_1',
    );
    // NULL means that we want to post to the page that is still contained in
    // SimpleTest's internal browser; i.e., the page of the path above. Instead
    // of passing NULL, you can also pass a Drupal system path and SimpleTest
    // will automatically do a $this->drupalGet($path) for you before posting.
    $this->drupalPost(NULL, $edit, t('Save'));

    // After posting, we expect to be redirected to the originating page, due
    // to the 'destination' query parameter in the 'Edit skin' link. Since we
    // came from the front page, Drupal will redirect us to the actual path of
    // the front page, not ''.
    // Verify that we were redirected to the originating page.
    $this->assertUrl($front);

    // Verify that the skin has been applied.
    $this->assertSkinrClass('block-system-user-menu', 'font-1', 'CSS class of configured skin option found.');
  }

  /**
   * Tests access control for editing additional CSS classes.
   */
  function testSkinAdditionalEdit() {
    // Verify that we can apply additional CSS classes.
    $edit = array(
      'skinr_settings[block_group][bartik][_additional]' => 'additional',
    );
    $this->drupalPost('admin/appearance/skinr/edit/nojs/block/system__user-menu/configure', $edit, t('Save'));

    // Verify that the skin has been applied.
    $this->drupalGet('');
    $this->assertSkinrClass('block-system-user-menu', 'additional', 'Additional CSS class <em>additional</em> of configured skin option found.');

    // Now let's check the same for a user that has no access to alter this.
    $user = $this->drupalCreateUser(array('edit skin settings'));
    $this->drupalLogin($user);

    // Verify that the additional CSS classes field is not enabled.
    $this->drupalGet('admin/appearance/skinr/edit/nojs/block/system__user-menu/configure');
    $this->assertNoFieldByName('skinr_settings[block_group][bartik][_additional]', NULL, 'Additional CSS classes field is not enabled for this user.');

    // Save form when additional CSS classes is not set.
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Save'));

    // Verify that the old class is still applied.
    $this->drupalGet('');
    $this->assertSkinrClass('block-system-user-menu', 'additional', 'Additional CSS class <em>additional</em> of configured skin option found.');
  }
}

/**
 * Tests administrative pages functionality.
 */
class SkinrUIAdminTestCase extends SkinrUITestCase {
  public static function getInfo() {
    return array(
      'name' => 'Administration',
      'description' => 'Tests administrative Skinr UI functionality.',
      'group' => 'Skinr',
    );
  }

  function setUp() {
    parent::setUp(array('skinr_test', 'skinr_ui'));

    $this->admin_user = $this->drupalCreateUser(array(
      'administer skinr',
      'edit skin settings',
      'edit advanced skin settings',
    ));
    $this->drupalLogin($this->admin_user);

    // Enable Garland and skinr_test_subtheme without enabling its base theme in
    // order to test subtheme inheritance functionality.
    theme_enable(array('garland', 'skinr_test_subtheme'));
  }

  /**
   * Tests default status of skins.
   *
   * The skinr_test_basetheme skin defined by the skinr_test_basetheme theme
   * specifies a default status for itself. Its subtheme should inherit the
   * status of the basetheme.
   *
   * @todo Add assertions for 'default status' itself.
   */
  function testSkinDefaultStatus() {
    // Verify that the skin appears on the skin overview page.
    $this->drupalGet('admin/appearance/skinr/skins');
    $this->assertLinkByHref('admin/appearance/skinr/skins/settings/skinr_test_basetheme');
    $this->drupalGet('admin/appearance/skinr/skins/settings/skinr_test_basetheme');

    // Verify that it is enabled for the skinr_test_subtheme, and disabled for
    // Bartik and Garland by default.
    $this->assertFieldChecked('edit-status-skinr-test-subtheme', 'skinr_test_basetheme skin is enabled for skinr_test_subtheme.');
    $this->assertNoFieldChecked('edit-status-bartik', 'skinr_test_basetheme skin is disabled for Bartik.');
    $this->assertNoFieldChecked('edit-status-garland', 'skinr_test_basetheme skin is disabled for Garland.');

    // Override the status for skinr_test_subtheme and Bartik, then verify them.
    $skin = (object) array(
      'theme' => 'skinr_test_subtheme',
      'module' => 'block',
      'element' => 'system-user-menu',
      'skin' => 'skinr_test_subtheme',
      'options' => array('option1', 'option2'),
      'status' => 1,
    );
    skinr_skin_save($skin);
    $skin = skinr_skin_load($skin->sid);

    // Override the default skin.
    $skin->element = 'system-main';
    $this->drupalGet('admin/appearance/skinr');
    $this->clickLink(t('disable'), 0);
    // Unaltered skin configuration object should have been saved with only the status updated.
    // Load an uncached version of the skin configuration object.
    $skin = skinr_skin_load_unchanged($skin->sid);
    $this->assertFalse($skin->status, 'Status was disabled successfully.');
    $this->assertEqual($skin->element, 'system-user-menu', 'Only status was updated, even though the object was modified before updating status.');

    // Enable the skin configuration.
    $this->drupalGet('admin/appearance/skinr');
    $this->clickLink(t('enable'), 0);
    // Load an uncached version of the skin configuration object.
    $skin = skinr_skin_load_unchanged($skin->sid);
    $this->assertTrue($skin->status, 'Status was enabled successfully.');
  }

  /**
   * Tests skin group functionality.
   */
  function testSkinGroups() {
    $this->drupalGet('admin/appearance/skinr/skins');

    // Verify that the 'General' (default) group appears.
    $this->assertText(t('General'));

    // Verify that the 'Typography' group appears, since skinr_test module
    // registers a skin in that group.
    $this->assertText(t('Typography'));
  }

  /**
   * Tests skin configuration listing functionality.
   */
  function testSkinListing() {
    $skin = (object) array(
      'theme' => 'skinr_test_subtheme',
      'module' => 'block',
      'element' => 'system__user-menu',
      'skin' => 'skinr_test_subtheme',
      'options' => array('option1', 'option2'),
      'status' => 1,
    );
    skinr_skin_save($skin);

    // Verify that the skin configuration appears on the skin configurations overview page.
    $this->drupalGet('admin/appearance/skinr');
    $this->assertLinkByHref('admin/appearance/skinr/delete/' . $skin->sid . '?destination=admin/appearance/skinr', 0, 'Skin configuration was found on overview page.');

    // @todo Should we check the filtering and update options functionality?
  }
}

/**
 * Tests rules administrative pages functionality.
 */
class SkinrUIRulesTestCase extends SkinrUITestCase {
  public static function getInfo() {
    return array(
      'name' => 'Rules UI',
      'description' => 'Tests rules functionality for Skinr UI.',
      'group' => 'Skinr',
    );
  }

  /**
   * Tests administrative interface for rules.
   */
  function testRules() {
    // Test that there is a rules page.
    $this->drupalGet('admin/appearance/skinr');
    $this->assertLinkByHref('admin/appearance/skinr/rules');

    // Test that there is a way to add rules.
    $this->drupalGet('admin/appearance/skinr/rules');
    $this->clickLink(t('Create a new rule'), 0);

    // Verify that we end up on the expected URL.
    $this->assertUrl('admin/appearance/skinr/rules/add');

    // Verify that we can create the rule.
    $edit = array(
      'rule[title]' => 'Rule 1',
      'rule[rule_type]' => 'page',
    );
    $this->drupalPost(NULL, $edit, t('Add'));

    // After posting, we expect to be redirected to the rule edit page.
    $this->assertUrl('admin/appearance/skinr/rules/edit/1');

    // Save rule.
    // @todo Add a skin and test whether it applies properly or not.
    $edit = array(
    );
    $this->drupalPost(NULL, $edit, t('Save rule'));

    // We should be returned back to the rules page.
    $this->assertUrl('admin/appearance/skinr/rules');

    // Make sure the new rule appears listed on this page.
    $this->assertLinkByHref('admin/appearance/skinr/rules/edit/1');
  }
}

/**
 * Tests UI functionality for Block plugin.
 */
class SkinrUIPluginTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Plugins UI',
      'description' => 'Tests Skinr UI functionality for functionality plugin.',
      'group' => 'Skinr',
    );
  }

  function setUp() {
    parent::setUp(array('block', 'php', 'page_manager', 'panels_node', 'panels_mini', 'views_ui', 'skinr', 'skinr_ui'));

    $this->admin_user = $this->drupalCreateUser(array(
      'administer blocks',
      'administer views',
      'access comments',
      'access content',
      'post comments',
      'skip comment approval',

      'use PHP for settings',
      'use page manager',
      'administer page manager',

      'access contextual links',
      'administer skinr',
      'edit skin settings',
      'edit advanced skin settings',
      'bypass node access',
    ));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Tests block plugin.
   */
  function testBlock() {
    // Enable user menu block for the first sidebar.
    // @see http://drupal.org/node/913086
    $default_theme = variable_get('theme_default', 'bartik');
    db_merge('block')
      ->key(array(
        'theme' => $default_theme,
        'module' => 'system',
        'delta' => 'user-menu',
      ))
      ->fields(array(
        'status' => 1,
        'region' => 'sidebar_first',
        'pages' => '',
      ))
      ->execute();

    // Get front page.
    $this->drupalGet('');

    // Make sure our contextual link appears on the page.
    $this->assertLinkByHref('admin/appearance/skinr/edit/nojs/block/system__user-menu/configure', 0, 'Contexual link to edit block\'s skin configuration was found.');
  }

  /**
   * Tests comment plugin.
   */
  function testComment() {
    // Create a node.
    $node1 = $this->drupalCreateNode(array('type' => 'article'));

    // Go to node.
    $uri = entity_uri('node', $node1);
    $this->drupalGet($uri['path']);

    // Add a comment to the node. With bartik the contextual links won't
    // display until there is at least one comment.
    $edit = array(
      'comment_body[und][0][value]' => $this->randomString(128),
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    // Make sure our contextual link appears on the page.
    $this->assertLinkByHref('admin/appearance/skinr/edit/nojs/comment/article/configure', 0, 'Contexual link to edit comment\'s skin configuration was found.');
  }

  /**
   * Tests node plugin.
   */
  function testNode() {
    // Create a node.
    $node = $this->drupalCreateNode(array('type' => 'article'));

    // Go to node.
    $uri = entity_uri('node', $node);
    $this->drupalGet($uri['path']);

    // Make sure our contextual link appears on the page.
    $this->assertLinkByHref('admin/appearance/skinr/edit/nojs/node/article/configure', 0, 'Contexual link to edit node\'s skin configuration was found.');
  }

  protected function panelData() {
    $object = <<<END
    \$page = new stdClass;
    \$page->disabled = FALSE;
    \$page->api_version = 1;
    \$page->name = 'skinr_ui_panel';
    \$page->task = 'page';
    \$page->admin_title = 'Skinr UI test panel';
    \$page->admin_description = '';
    \$page->path = 'skinr-ui-panel';
    \$page->access = array();
    \$page->menu = array();
    \$page->arguments = array();
    \$page->conf = array(
      'admin_paths' => FALSE,
    );
    \$page->default_handlers = array();
    \$handler = new stdClass;
    \$handler->disabled = FALSE;
    \$handler->api_version = 1;
    \$handler->name = 'page_test_panel_panel_context';
    \$handler->task = 'page';
    \$handler->subtask = 'test_panel';
    \$handler->handler = 'panel_context';
    \$handler->weight = 0;
    \$handler->conf = array(
      'title' => 'Panel',
      'no_blocks' => 0,
      'pipeline' => 'standard',
      'css_id' => '',
      'css' => '',
      'contexts' => array(),
      'relationships' => array(),
    );
    \$display = new panels_display;
    \$display->layout = 'onecol';
    \$display->layout_settings = array();
    \$display->panel_settings = array(
      'style_settings' => array(
        'default' => NULL,
        'middle' => NULL,
      ),
    );
    \$display->cache = array();
    \$display->title = '';
    \$display->content = array();
    \$display->panels = array();
      \$pane = new stdClass;
      \$pane->pid = 'new-1';
      \$pane->panel = 'middle';
      \$pane->type = 'block';
      \$pane->subtype = 'system-user-menu';
      \$pane->shown = TRUE;
      \$pane->access = array();
      \$pane->configuration = array(
        'override_title' => 0,
        'override_title_text' => '',
      );
      \$pane->cache = array();
      \$pane->style = array(
        'settings' => NULL,
      );
      \$pane->css = array();
      \$pane->extras = array();
      \$pane->position = 0;
      \$display->content['new-1'] = \$pane;
      \$display->panels['middle'][0] = 'new-1';
    \$display->hide_title = PANELS_TITLE_FIXED;
    \$display->title_pane = 'new-1';
    \$handler->conf['display'] = \$display;
    \$page->default_handlers[\$handler->name] = \$handler;
END;
    return $object;
  }

  /**
   * Tests panels plugin.
   */
  function testPanels() {
    // Import a simple panel page.
    $edit = array(
      'object' => $this->panelData(),
    );
    $this->drupalPost('admin/structure/pages/import', $edit, t('Import'));
    // This is a multi-form.
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Save'));

    // Go to panel page.
    $this->drupalGet('skinr-ui-panel');

    // Make sure our contextual link appears on the page.
    // @todo Is there a better way to determine did and pid used for this panel?
    $this->assertLinkByHref('admin/appearance/skinr/edit/nojs/panels/pane__1__1/configure', 0, 'Contexual link to edit pane\'s skin configuration panel page was found.');


    // Create a simple panel node.
    $node = $this->drupalCreateNode(array(
      'type' => 'panel',
      'panels_node' => array(
        'layout' => 'onecol',
        'css_id' => '',
        'pipeline' => 'standard',
      ),
    ));

    // Add a block to our panel node.
    $display = panels_load_display($node->panels_node['did']);
    $pane = panels_new_pane('block', 'system-user-menu', TRUE);
    $display->add_pane($pane, 'middle');
    $this->assertTrue(panels_save_display($display), 'Block was successfully added to panel node.');

    // Go to node.
    $uri = entity_uri('node', $node);
    $this->drupalGet($uri['path']);

    // Make sure our contextual link appears on the page.
    // @todo Is there a better way to determine did and pid used for this panel?
    $this->assertLinkByHref('admin/appearance/skinr/edit/nojs/panels/pane__2__2/configure', 0, 'Contexual link to edit pane\'s skin configuration on panel node was found.');


    // Create a simple mini panel.
    $mini = panels_mini_new();
    $mini->name = 'skinr_ui_test';
    $mini->admin_title = 'Skinr UI Test';
    $mini->display = panels_new_display();
    $mini->display->layout = 'onecol';
    $pane = panels_new_pane('block', 'system-user-menu', TRUE);
    $mini->display->add_pane($pane, 'middle');
    $this->assertTrue(panels_mini_save($mini), 'Mini panel was successully created.');

    // Add the mini block to the sidebar.
    $default_theme = variable_get('theme_default', 'bartik');
    db_merge('block')
      ->key(array(
        'theme' => $default_theme,
        'module' => 'panels_mini',
        'delta' => 'skinr_ui_test',
      ))
      ->fields(array(
        'status' => 1,
        'region' => 'sidebar_first',
        'pages' => '',
      ))
      ->execute();

    // Go front page.
    $this->drupalGet('');

    // Make sure our contextual link appears on the page.
    // @todo Is there a better way to determine did and pid used for this panel?
    $this->assertLinkByHref('admin/appearance/skinr/edit/nojs/panels/pane__3__3/configure', 0, 'Contexual link to edit pane\'s skin configuration on mini panel was found.');
  }

  /**
   * Tests views plugin.
   */
  function testViews() {
    // Create a simple view with page.
    $view = array();
    $view['human_name'] = $this->randomName(16);
    $view['name'] = strtolower($this->randomName(16));
    $view['description'] = $this->randomName(16);
    $view['page[create]'] = 1;
    $view['page[title]'] = $this->randomName(16);
    $view['page[path]'] = $this->randomName(16);
    $this->drupalPost('admin/structure/views/add', $view, t('Save & exit'));

    // Since the view has a page, we expect to be automatically redirected
    // to it.
    $this->assertUrl($view['page[path]']);

    // Make sure our contextual link appears on the page.
    $this->assertLinkByHref('admin/appearance/skinr/edit/nojs/views/' . $view['name'] . '__page/configure', 0, 'Contexual link to edit view\'s skin configuration was found.');
  }
}
